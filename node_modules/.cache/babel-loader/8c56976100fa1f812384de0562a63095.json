{"ast":null,"code":"var _jsxFileName = \"/Users/cristianoandradre/Documents/treinamentoAWS/blogfinal/blogfinal/src/components/DisplayPosts.js\";\nimport React, { Component } from 'react';\nimport { listPosts } from '../graphql/queries';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport DeletePost from './DeletePost';\nimport EditPost from './EditPost';\nimport { onCreatePost, onDeletePost, onUpdatePost, onCreateComment } from '../graphql/subscriptions';\nimport { updatePost } from '../graphql/mutations';\nimport CreateCommentPost from './CreateCommentPost';\nimport CommentPost from './CommentPost';\n\nclass DisplayPosts extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: []\n    };\n\n    this.componentDidMount = async () => {\n      this.getPosts();\n      this.createPostListener = API.graphql(graphqlOperation(onCreatePost)).subscribe({\n        next: postData => {\n          const newPost = postData.value.data.onCreatePost;\n          const prevPosts = this.state.posts.filter(post => post.id !== newPost.id);\n          const updatedPosts = [newPost, ...prevPosts];\n          this.setState({\n            posts: updatedPosts\n          });\n        }\n      });\n      this.deletePostListener = API.graphql(graphqlOperation(onDeletePost)).subscribe({\n        next: postData => {\n          const deletedPost = postData.value.data.onDeletePost;\n          const updatedPosts = this.state.posts.filter(post => post.id !== deletedPost.id);\n          this.setState({\n            posts: updatedPosts\n          });\n        }\n      });\n      this.updatePostListener = API.graphql(graphqlOperation(onUpdatePost)).subscribe({\n        next: postData => {\n          const {\n            posts\n          } = this.state;\n          const updatedPost = postData.value.data.onUpdatePost; //retorna o index do array quando encontrar o id do post atualizado\n\n          const index = posts.findIndex(post => post.id === updatedPost.id);\n          const updatePosts = [...posts.slice(0, index), updatedPost, ...posts.slice(index + 1)];\n          this.setState({\n            posts: updatePosts\n          });\n        }\n      });\n      this.createPostCommentListener = API.graphql(graphqlOperation(onCreateComment)).subscribe({\n        next: commentData => {\n          const createdComment = commentData.value.data.onCreateComment;\n          let posts = [...this.state.posts];\n\n          for (let post of posts) {\n            if (createdComment.post.id === post.id) {\n              post.comment.items.push(createdComment);\n            }\n\n            this.setState({\n              posts\n            });\n          }\n        }\n      });\n    };\n\n    this.getPosts = async () => {\n      const result = await API.graphql(graphqlOperation(listPosts)); //console.log(\"All Posts: \", JSON.stringify(result.data.listPosts.items));\n      //console.log(\"All Posts: \", result.data.listPosts.items);\n\n      this.setState({\n        posts: result.data.listPosts.items\n      });\n    };\n  }\n\n  componentWillUnmount() {\n    this.createPostListener.unsubscribe();\n    this.deletePostListener.unsubscribe();\n    this.updatePostListener.unsubscribe();\n    this.createPostCommentListener.unsubscribe();\n  }\n\n  render() {\n    const {\n      posts\n    } = this.state;\n    return posts.map(post => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"posts\",\n        style: rowStyle,\n        key: post.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }\n      }, post.postTitle), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          fontStyle: \"italic\",\n          color: \"#0ca5e297\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }\n      }, \"Postado Por: \", \" \", post.postOwnerUsername, \" on \", /*#__PURE__*/React.createElement(\"time\", {\n        style: {\n          fontStyle: \"italic\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }\n      }, \" \", new Date(post.createdAt).toDateString())), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }\n      }, post.postBody), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(DeletePost, {\n        data: post,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(EditPost, Object.assign({}, post, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(CreateCommentPost, {\n        postId: post.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }\n      }), post.comments.items.lenght > 0 && /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          fontSize: \"19px\",\n          color: \"gray\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }\n      }, \"Comments:\"), post.comments.items.map((comment, index) => /*#__PURE__*/React.createElement(CommentPost, {\n        key: index,\n        commentData: comment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 30\n        }\n      }))));\n    });\n  }\n\n}\n\nconst rowStyle = {\n  background: '#f4f4f4',\n  padding: '10px',\n  border: '1px #ccc dotted',\n  margin: '14px'\n};\nexport default DisplayPosts;","map":{"version":3,"sources":["/Users/cristianoandradre/Documents/treinamentoAWS/blogfinal/blogfinal/src/components/DisplayPosts.js"],"names":["React","Component","listPosts","API","graphqlOperation","DeletePost","EditPost","onCreatePost","onDeletePost","onUpdatePost","onCreateComment","updatePost","CreateCommentPost","CommentPost","DisplayPosts","state","posts","componentDidMount","getPosts","createPostListener","graphql","subscribe","next","postData","newPost","value","data","prevPosts","filter","post","id","updatedPosts","setState","deletePostListener","deletedPost","updatePostListener","updatedPost","index","findIndex","updatePosts","slice","createPostCommentListener","commentData","createdComment","comment","items","push","result","componentWillUnmount","unsubscribe","render","map","rowStyle","postTitle","fontStyle","color","postOwnerUsername","Date","createdAt","toDateString","postBody","comments","lenght","fontSize","background","padding","border","margin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { listPosts } from '../graphql/queries';\nimport { API, graphqlOperation} from 'aws-amplify'\nimport DeletePost from './DeletePost';\nimport EditPost from './EditPost';\nimport { onCreatePost, onDeletePost, onUpdatePost, onCreateComment } from '../graphql/subscriptions';\nimport { updatePost } from '../graphql/mutations';\nimport CreateCommentPost from './CreateCommentPost';\nimport CommentPost from './CommentPost'\nclass DisplayPosts extends Component {\n\n    state = {\n        posts: []\n    }\n\n    componentDidMount = async () => {\n        this.getPosts();\n\n        this.createPostListener = API.graphql(graphqlOperation(onCreatePost))\n        .subscribe({\n            next: postData => {\n                const newPost = postData.value.data.onCreatePost\n                const prevPosts = this.state.posts.filter( post => post.id !== newPost.id)\n                const updatedPosts = [newPost, ...prevPosts]\n                this.setState({posts: updatedPosts})\n            }\n        })\n\n        this.deletePostListener = API.graphql(graphqlOperation(onDeletePost))\n        .subscribe({\n            next: postData =>{\n                const deletedPost = postData.value.data.onDeletePost\n                const updatedPosts = this.state.posts.filter(post => post.id !== deletedPost.id)\n                this.setState({posts: updatedPosts})\n            }\n        })\n\n        this.updatePostListener = API.graphql(graphqlOperation(onUpdatePost))\n        .subscribe({\n            next: postData =>{\n                const {posts} = this.state\n                const updatedPost = postData.value.data.onUpdatePost\n                //retorna o index do array quando encontrar o id do post atualizado\n                const index = posts.findIndex(post => post.id === updatedPost.id)\n                const updatePosts = [\n                    ...posts.slice(0,index),\n                    updatedPost,\n                ...posts.slice(index+1)]\n                this.setState({posts: updatePosts})\n            }\n        })\n        \n        this.createPostCommentListener = API.graphql(graphqlOperation(onCreateComment))\n        .subscribe({\n            next: commentData => {\n                const createdComment = commentData.value.data.onCreateComment\n                let posts = [...this.state.posts]\n\n                for (let post of posts){\n                    if (createdComment.post.id === post.id){\n                        post.comment.items.push(createdComment)\n                    }\n\n                    this.setState({posts})\n                }\n            }\n        })\n    }\n\n    componentWillUnmount(){\n        this.createPostListener.unsubscribe()\n        this.deletePostListener.unsubscribe()\n        this.updatePostListener.unsubscribe()\n        this.createPostCommentListener.unsubscribe()\n    }\n\n    getPosts = async () => {\n        const result = await API.graphql(graphqlOperation(listPosts));\n        //console.log(\"All Posts: \", JSON.stringify(result.data.listPosts.items));\n        //console.log(\"All Posts: \", result.data.listPosts.items);\n        this.setState({posts: result.data.listPosts.items})\n    }\n\n    render() { \n        const {posts} = this.state;\n        return posts.map((post) => {\n            return(\n                <div className=\"posts\" style={rowStyle} key = {post.id}>\n                    <h1>{post.postTitle}</h1>\n                    <span style={{ fontStyle: \"italic\", color:\"#0ca5e297\" }}>\n                        {\"Postado Por: \"} {post.postOwnerUsername}\n                        {\" on \"}\n                        <time style={{ fontStyle: \"italic\"}}>\n                            {\" \"}\n                            { new Date(post.createdAt).toDateString()}\n                        </time>\n                    </span>\n                    <p>\n                        {post.postBody}\n\n                    </p>\n                    <br />\n                    <span>\n                        <DeletePost data = {post}/>\n                        <EditPost {...post}/>\n                    </span>\n                    \n                    <span>\n                        <CreateCommentPost postId={post.id}/>\n                        { post.comments.items.lenght > 0 && \n                        <span style = {{fontSize:\"19px\", color:\"gray\"}}> \n                            Comments:\n                         </span> }\n                         {\n                             post.comments.items.map((comment, index) =>\n                             <CommentPost key = {index} commentData={comment} />)\n                         }\n                    </span>\n\n                </div>\n            )\n        })\n    }\n}\n\nconst rowStyle = {\n\n    background: '#f4f4f4',\n    padding: '10px',\n    border: '1px #ccc dotted',\n    margin: '14px'\n\n}\n\nexport default DisplayPosts;"]},"metadata":{},"sourceType":"module"}
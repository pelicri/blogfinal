{"ast":null,"code":"var _jsxFileName = \"/Users/cristianoandradre/Documents/treinamentoAWS/blogfinal/blogfinal/src/components/DisplayPosts.js\";\nimport React, { Component } from 'react';\nimport { listPosts } from '../graphql/queries';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport DeletePost from './DeletePost';\nimport EditPost from './EditPost';\nimport { onCreatePost, onDeletePost, onUpdatePost } from '../graphql/subscriptions';\nimport { updatePost } from '../graphql/mutations';\nimport CreateCommentPost from './CreateCommentPost';\n\nclass DisplayPosts extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      posts: []\n    };\n\n    this.componentDidMount = async () => {\n      this.getPosts();\n      this.createPostListener = API.graphql(graphqlOperation(onCreatePost)).subscribe({\n        next: postData => {\n          const newPost = postData.value.data.onCreatePost;\n          const prevPosts = this.state.posts.filter(post => post.id !== newPost.id);\n          const updatedPosts = [newPost, ...prevPosts];\n          this.setState({\n            posts: updatedPosts\n          });\n        }\n      });\n      this.deletePostListener = API.graphql(graphqlOperation(onDeletePost)).subscribe({\n        next: postData => {\n          const deletedPost = postData.value.data.onDeletePost;\n          const updatedPosts = this.state.posts.filter(post => post.id !== deletedPost.id);\n          this.setState({\n            posts: updatedPosts\n          });\n        }\n      });\n      this.updatePostListener = API.graphql(graphqlOperation(onUpdatePost)).subscribe({\n        next: postData => {\n          const {\n            posts\n          } = this.state;\n          const updatedPost = postData.value.data.onUpdatePost; //retorna o index do array quando encontrar o id do post atualizado\n\n          const index = posts.findIndex(post => post.id === updatedPost.id);\n          const updatePosts = [...posts.slice(0, index), updatedPost, ...posts.slice(index + 1)];\n          this.setState({\n            posts: updatePosts\n          });\n        }\n      });\n    };\n\n    this.getPosts = async () => {\n      const result = await API.graphql(graphqlOperation(listPosts)); //console.log(\"All Posts: \", JSON.stringify(result.data.listPosts.items));\n      //console.log(\"All Posts: \", result.data.listPosts.items);\n\n      this.setState({\n        posts: result.data.listPosts.items\n      });\n    };\n  }\n\n  componentWillUnmount() {\n    this.createPostListener.unsubscribe();\n    this.deletePostListener.unsubscribe();\n    this.updatePostListener.unsubscribe();\n  }\n\n  render() {\n    const {\n      posts\n    } = this.state;\n    return posts.map(post => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"posts\",\n        style: rowStyle,\n        key: post.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }\n      }, post.postTitle), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          fontStyle: \"italic\",\n          color: \"#0ca5e297\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }\n      }, \"Postado Por: \", \" \", post.postOwnerUsername, \" on \", /*#__PURE__*/React.createElement(\"time\", {\n        style: {\n          fontStyle: \"italic\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }\n      }, \" \", new Date(post.createdAt).toDateString())), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }\n      }, post.postBody), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(DeletePost, {\n        data: post,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(EditPost, Object.assign({}, post, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }\n      }))));\n    });\n  }\n\n}\n\nconst rowStyle = {\n  background: '#f4f4f4',\n  padding: '10px',\n  border: '1px #ccc dotted',\n  margin: '14px'\n};\nexport default DisplayPosts;","map":{"version":3,"sources":["/Users/cristianoandradre/Documents/treinamentoAWS/blogfinal/blogfinal/src/components/DisplayPosts.js"],"names":["React","Component","listPosts","API","graphqlOperation","DeletePost","EditPost","onCreatePost","onDeletePost","onUpdatePost","updatePost","CreateCommentPost","DisplayPosts","state","posts","componentDidMount","getPosts","createPostListener","graphql","subscribe","next","postData","newPost","value","data","prevPosts","filter","post","id","updatedPosts","setState","deletePostListener","deletedPost","updatePostListener","updatedPost","index","findIndex","updatePosts","slice","result","items","componentWillUnmount","unsubscribe","render","map","rowStyle","postTitle","fontStyle","color","postOwnerUsername","Date","createdAt","toDateString","postBody","background","padding","border","margin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { listPosts } from '../graphql/queries';\nimport { API, graphqlOperation} from 'aws-amplify'\nimport DeletePost from './DeletePost';\nimport EditPost from './EditPost';\nimport { onCreatePost, onDeletePost, onUpdatePost } from '../graphql/subscriptions';\nimport { updatePost } from '../graphql/mutations';\nimport CreateCommentPost from './CreateCommentPost';\nclass DisplayPosts extends Component {\n\n    state = {\n        posts: []\n    }\n\n    componentDidMount = async () => {\n        this.getPosts();\n\n        this.createPostListener = API.graphql(graphqlOperation(onCreatePost))\n        .subscribe({\n            next: postData => {\n                const newPost = postData.value.data.onCreatePost\n                const prevPosts = this.state.posts.filter( post => post.id !== newPost.id)\n                const updatedPosts = [newPost, ...prevPosts]\n                this.setState({posts: updatedPosts})\n            }\n        })\n\n        this.deletePostListener = API.graphql(graphqlOperation(onDeletePost))\n        .subscribe({\n            next: postData =>{\n                const deletedPost = postData.value.data.onDeletePost\n                const updatedPosts = this.state.posts.filter(post => post.id !== deletedPost.id)\n                this.setState({posts: updatedPosts})\n            }\n        })\n\n        this.updatePostListener = API.graphql(graphqlOperation(onUpdatePost))\n        .subscribe({\n            next: postData =>{\n                const {posts} = this.state\n                const updatedPost = postData.value.data.onUpdatePost\n                //retorna o index do array quando encontrar o id do post atualizado\n                const index = posts.findIndex(post => post.id === updatedPost.id)\n                const updatePosts = [\n                    ...posts.slice(0,index),\n                    updatedPost,\n                ...posts.slice(index+1)]\n                this.setState({posts: updatePosts})\n            }\n        })\n    }\n\n    componentWillUnmount(){\n        this.createPostListener.unsubscribe()\n        this.deletePostListener.unsubscribe()\n        this.updatePostListener.unsubscribe()\n    }\n\n    getPosts = async () => {\n        const result = await API.graphql(graphqlOperation(listPosts));\n        //console.log(\"All Posts: \", JSON.stringify(result.data.listPosts.items));\n        //console.log(\"All Posts: \", result.data.listPosts.items);\n        this.setState({posts: result.data.listPosts.items})\n    }\n\n    render() { \n        const {posts} = this.state;\n        return posts.map((post) => {\n            return(\n                <div className=\"posts\" style={rowStyle} key = {post.id}>\n                    <h1>{post.postTitle}</h1>\n                    <span style={{ fontStyle: \"italic\", color:\"#0ca5e297\" }}>\n                        {\"Postado Por: \"} {post.postOwnerUsername}\n                        {\" on \"}\n                        <time style={{ fontStyle: \"italic\"}}>\n                            {\" \"}\n                            { new Date(post.createdAt).toDateString()}\n                        </time>\n                    </span>\n                    <p>\n                        {post.postBody}\n\n                    </p>\n                    <br />\n                    <span>\n                        <DeletePost data = {post}/>\n                        <EditPost {...post}/>\n                    </span>\n                  \n\n                </div>\n            )\n        })\n    }\n}\n\nconst rowStyle = {\n\n    background: '#f4f4f4',\n    padding: '10px',\n    border: '1px #ccc dotted',\n    margin: '14px'\n\n}\n\nexport default DisplayPosts;"]},"metadata":{},"sourceType":"module"}